unit TestUAbastecimentoSerivo;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, bomba, UTanqueRepositorio, System.Generics.Collections, tanque,abastecimento,
  UBombaRepositorio, UAbastecimentoSerivo, UAbastecimentoRepositorio;

type
  // Test methods for class TAbastecimentoServico

 TMockBombaRepositorio = class(TBombaRepositorio)
 public
    function ObterPorId(Id: Integer): TBomba;
    // Implemente outros métodos necessários para o MOC
 end;

 TMockTanqueRepositorio = class(TTanqueRepositorio)
 public
    function ObterPorId(Id: Integer): TTanque;
    // Implemente outros métodos necessários para o MOC
 end;

 TMockAbastecimentoRepositorio = class(TAbastecimentoRepositorio)
 public
    procedure GerarAbastecimento(Abastecimento: TAbastecimento); override;
    // Implemente outros métodos necessários para o MOC
 end;


  TestTAbastecimentoServico = class(TTestCase)
  strict private
    FAbastecimentoServico: TAbastecimentoServico;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestcalcularImposto;
    procedure TestAbastecer;
  end;

implementation

uses
  Data.SqlExpr, System.SysUtils;


{ TMockBombaRepositorio }

function TMockBombaRepositorio.ObterPorId(Id: Integer): TBomba;
begin
  Result := TBomba.Create;
  Result.Id := Id;
  Result.NomeBomba := 'Bomba de Teste';
end;

{ TMockTanqueRepositorio }

function TMockTanqueRepositorio.ObterPorId(Id: Integer): TTanque;
begin
  Result := TTanque.Create;
  Result.Id := Id;
  Result.NomeTanque := 'Tanque de Teste';
end;

{ TMockAbastecimentoRepositorio }

procedure TMockAbastecimentoRepositorio.GerarAbastecimento(Abastecimento: TAbastecimento);
begin
  TAbastecimento.Create;
end;


procedure TestTAbastecimentoServico.SetUp;
var
  MockBombaRepositorio : TMockBombaRepositorio;
  MockTanqueRepositorio : TMockTanqueRepositorio;
  MockAbastecimentoRepositorio : TMockAbastecimentoRepositorio;
  Query : TSQLQuery;
begin
   Query := TSQLQuery.Create(nil);
   MockBombaRepositorio := TMockBombaRepositorio.Create(Query);
  FAbastecimentoServico := TAbastecimentoServico.Create(MockBombaRepositorio,
                                                        MockTanqueRepositorio.Create(Query),
                                                        TMockAbastecimentoRepositorio.Create(Query));
end;

procedure TestTAbastecimentoServico.TearDown;
begin
  FAbastecimentoServico.Free;
  FAbastecimentoServico := nil;
end;

procedure TestTAbastecimentoServico.TestcalcularImposto;
var
  ReturnValue: Double;
  pAliquota: Double;
  pBaseDeCalculo: Double;
begin
  // TODO: Setup method call parameters
  ReturnValue := FAbastecimentoServico.calcularImposto(pBaseDeCalculo, pAliquota);
  // TODO: Validate method results
end;

procedure TestTAbastecimentoServico.TestAbastecer;
var
  ReturnValue: TAbastecimentoDTO;
  pAbastecimento: TAbastecimentoDTO;
begin
   pAbastecimento:= TAbastecimentoDTO.Create;
   pAbastecimento.Valor := 120;
   pAbastecimento.Data  := now;
   pAbastecimento.Litros := 20;
   pAbastecimento.Imposto:= 15.60;
   pAbastecimento.IdBomba := 1;

  // TODO: Setup method call parameters
  ReturnValue := FAbastecimentoServico.Abastecer(pAbastecimento);

  CheckEquals(ReturnValue.Valor,pAbastecimento.Valor,'Valor difere');
  CheckEquals(ReturnValue.Data,pAbastecimento.Data,'data difre');
  CheckEquals(ReturnValue.Litros,pAbastecimento.Litros,'litros difere');
  CheckEquals(ReturnValue.Imposto,pAbastecimento.Imposto);
  CheckEquals(ReturnValue.IdBomba,pAbastecimento.IdBomba);

  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAbastecimentoServico.Suite);
end.

