unit UBombaServico;

interface

uses
  UBombaRepositorio, bomba, System.Generics.Collections;

type BombaDTO=class
  private
    FId: Integer;
    FNomeBomba: string;
    FIdTanque: Integer;
  public
    property Id: Integer read FId write FId;
    property NomeBomba: string read FNomeBomba write FNomeBomba;
    property IdTanque: Integer read FIdTanque write FIdTanque;
end;

 TBombaServico=class
  private
     FBombaRepositorio : TBombaRepositorio;
  public
     procedure CadastrarNovaBomba(pBomba : BombaDTO);
     function ObterBombaPorId(pId : integer) : BombaDTO;
     function ObterTodasAsBombas : TObjectList<BombaDTO>;
     constructor Create(pBombaRepositorio : TBombaRepositorio);
end;

implementation

{ TBombaServico }

constructor TBombaServico.Create(pBombaRepositorio: TBombaRepositorio);
begin
   FBombaRepositorio := pBombaRepositorio;
end;

procedure TBombaServico.CadastrarNovaBomba(pBomba : BombaDTO);
var
  bomba : TBomba;
begin
    {conversão do DTO para objeto de domínio}
    bomba := TBomba.Create;
    bomba.Id := pBomba.FId;
    bomba.NomeBomba := pBomba.FNomeBomba;
    bomba.IdTanque  := pBomba.FIdTanque;
    try
       FBombaRepositorio.Adicionar(Bomba);
    finally
       bomba.Free;
    end;
end;

function TBombaServico.ObterBombaPorId(pId: integer): BombaDTO;
var
  bomba : TBomba;
begin
    {conversão de objeto de domínio para DTO}
    bomba := FBombaRepositorio.ObterPorId(pId);
    BombaDTO.Id := Bomba.Id;
    BombaDTO.NomeBomba := Bomba.NomeBomba;
    BombaDTO.IdTanque  := Bomba.IdTanque;

    Result :=  FBombaRepositorio.ObterPorId(pId);
end;

function TBombaServico.ObterTodasAsBombas: TObjectList<BombaDTO>;
begin
    Result := FBombaRepositorio.ObterTodas;
end;

end.
