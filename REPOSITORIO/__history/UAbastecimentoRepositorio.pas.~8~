unit UAbastecimentoRepositorio;

interface

uses
  System.Generics.Collections, Data.SqlExpr, abastecimento;

type TAbastecimentoRepositorio = class
  private
    FSQLQuery : TSQLQuery;
  public
    procedure GerarAbastecimento(pAbastecimento : TAbastecimento);
    function ObeterPorId(pId : integer) : TAbastecimento;
    function ObeterPorData(pDataInicial,pDataFinal : TDate) : TObjectList<TAbastecimento>;
    function ObeterPorBomda(pDataInicial,pDataFinal : TDate) : TObjectList<TAbastecimento>;

    Constructor Create(pQuery : TSQLQuery);
end;

implementation

uses
  System.SysUtils;

{ TAbastecimentoRepositorio }

constructor TAbastecimentoRepositorio.Create(pQuery : TSQLQuery);
begin
    FSQLQuery := pQuery;
end;

procedure TAbastecimentoRepositorio.GerarAbastecimento(
  pAbastecimento: TAbastecimento);
begin
   pAbastecimento.validar;
   try
      FSQLQuery.SQL.Clear;
      FSQLQuery.SQL.Add('INSERT INTO BOMBA(NOMEBOMBA,IDTANQUE) VALUES (');
      FSQLQuery.SQL.Add(quotedstr(FormatDateTime('yyyy-mm-dd',pAbastecimento.Data))+',');
      FSQLQuery.SQL.Add(quotedstr(FloatToStr(pAbastecimento.Valor))+',');
      FSQLQuery.SQL.Add(quotedstr(FloatToStr(pAbastecimento.Imposto))+',');
      FSQLQuery.SQL.Add(quotedstr(pAbastecimento.IdBomba.ToString())+')');
      FSQLQuery.ExecSQL();
   except
      raise Exception.Create('Não foi possível cadastrar uma nova bomba!');
   end;
end;

function TAbastecimentoRepositorio.ObeterPorBomda(pDataInicial,
  pDataFinal: TDate): TObjectList<TAbastecimento>;
begin

end;

function TAbastecimentoRepositorio.ObeterPorData(pDataInicial,
  pDataFinal: TDate): TObjectList<TAbastecimento>;
begin

end;

function TAbastecimentoRepositorio.ObeterPorId(pId: integer): TAbastecimento;
begin

end;

end.
